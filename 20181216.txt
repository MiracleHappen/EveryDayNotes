20181216

1.API设计

在完成了前端静态布局的实现之后，接下来就要进入到 API 的设计阶段了！

相信大家还记得，我们在第一学期为大家提供的天气 API，那就是一个网络 API 的实例——你可以使用它从服务器获取天气数据。不过这一次的课程中你将会实现一套更为强大的 API 接口，让你不仅能从服务上下载数据，还能将本地的信息上传到服务器～

在这一节，我们将会宏观地带大家认识一下网络 API，了解：

API 设计的理念与原则
搭建 API 需要哪些资源与配置

2.

首先，在我们的小程序中，各种数据都储存在服务器中。与服务器进行的数据交互，都是通过 API 请求来实现的。就获取商品数据而言，我们向服务器发送读取商品数据的 API 请求，来从服务器获取商品数据。所以 API 请求实际上就是，告诉服务器，需要对什么样的数据资源、进行怎样的操作，例如下载或是上传修改，并要求服务器返回相应的结果。 因此，在我们的 API 设计中，重点是明确：

涉及到什么样的数据
对数据进行怎样的操作。
具体来说：

我们会基于 HTTP 来实现我们访问 API 的请求，即使用 HTTP 链接的形式，访问我们的 API。
同时我们会使用四种基本的 HTTP 操作，来明确该 API 请求将对数据进行怎样的操作。

3.
MDN对于HTTP的介绍
https://developer.mozilla.org/zh-CN/docs/Web/HTTP

超文本传输​​协议（HTTP）是用于传输诸如HTML的超媒体文档的应用层协议。它被设计用于Web浏览器和Web服务器之间的通信，但它也可以用于其他目的。 HTTP遵循经典的客户端-服务端模型，客户端打开一个连接以发出请求，然后等待它收到服务器端响应。 HTTP是无状态协议，意味着服务器不会在两个请求之间保留任何数据（状态）。虽然通常基于TCP / IP层，但可以在任何可靠的传输层上使用; 也就是说，一个不会静默丢失消息的协议，如UDP。

关于四种 HTTP 操作
视频中我们提到的 4 种 HTTP 操作：
Get：请求获取资源
POST：创建资源
PUT：创建或更新资源
DELETE：删除资源

4.微软API设计原则
https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design#define-operations-in-terms-of-http-methods


5.
之前已经提到，API是来访问我们服务器上的数据资源的。那么我们需要对服务器进行配置呢？聪明的你可能已经想到，我们需要：

一个监听程序，来监听用户的请求
对用户的请求进行处理，并将处理结果返回给用户
存储数据的数据库，以及操作数据库的方法
幸运的是，基于小程序提供的开发套件，我们能轻松地实现监听、处理及返回的功能。同时如果基于腾讯云部署我们的小程序，我们能方便地对数据库进行配置


6.
我们开始尝试配置腾讯云服务器吧。

之前我们已经提到过，server 文件夹下是服务器相关的文件。那么在这里，我们将尝试修改这些文件。

首先我们进入 project.config 文件，复制我们的小程序 AppID 随后进入到 server 文件夹下，修改 config.js 文件，找到数据库密码对应的部分，改为我们的 appID。

第一次上传呢，选择全部上传。因为需要服务器的配置等内容，所以会花费比较长的时间。完成上传之后，我们就完成了服务器的部署。



7.


